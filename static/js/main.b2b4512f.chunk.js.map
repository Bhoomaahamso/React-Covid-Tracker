{"version":3,"sources":["InfoBox.js","Table.js","utils.js","Map.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","className","onClick","click","CardContent","Typography","Table","listCountry","map","country","numeral","format","editValue","stat","sortData","data","value","sort","a","b","casesTypeColors","hex","mult","recovered","deaths","showData","casesType","Circle","center","countryInfo","lat","long","fillOpacity","radius","Math","sqrt","pathOptions","color","fillColor","Popup","style","backgroundImage","flag","Map","zoom","mapcountries","ChangeView","useMap","setView","TileLayer","url","attribution","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","countries","setCountries","setMapcountries","allCountry","setAllCountry","setListCountry","setCountry","setCasesType","lng","mapcenter","setMapcenter","mapzoom","setMapzoom","res","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2b4512f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n  return (\r\n    <Card\r\n      className={`info_card ${active && \"selected\"} ${isRed && \"red-top\"}`}\r\n      onClick={props.click}\r\n    >\r\n      <CardContent>\r\n        <Typography>{title}</Typography>\r\n        <h2 className={`infoBox_cases ${!isRed && \"green\"}`}>{cases}</h2>\r\n        <Typography>{total} Total</Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nconst Table = ({ listCountry }) => {\r\n  return (\r\n    <div className=\"table\">\r\n      <h2>Cases by Countries</h2>\r\n\r\n      <div className=\"list\">\r\n        {listCountry.map(({ country, cases }) => (\r\n          <p className=\"list-item\">\r\n            <span>{country}</span>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </p>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\n\r\nexport const editValue = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const sortData = (data) => {\r\n  const value = data;\r\n  value.sort((a, b) => b.cases - a.cases);\r\n  return value;\r\n};\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    mult: 400,\r\n  },\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    mult: 600,\r\n  },\r\n  deaths: {\r\n    hex: \"#C0C0C0\",\r\n    mult: 1000,\r\n  },\r\n};\r\n\r\nexport const showData = (data, casesType) =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].mult}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n    >\r\n      <Popup>\r\n        <div>\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div>\r\n            <h1>{country.country}</h1>\r\n          </div>\r\n          <div>Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n          <div>Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n          <div>Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\r\nimport { showData } from \"./utils\";\r\n\r\nfunction Map({ center, zoom, casesType, mapcountries }) {\r\n  function ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Map\">\r\n      <LeafletMap>\r\n        <ChangeView center={center} zoom={zoom} />\r\n\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a>\r\n            contributors'\r\n        />\r\n        {showData(mapcountries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport \"./LineGraph.css\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className=\"graph\">\r\n      <h2>Worldwide new {casesType}</h2>\r\n      {data?.length > 0 ? (\r\n        <Line\r\n          className=\"line\"\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      ) : (\r\n        <h1>load..</h1>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import { useState, useEffect } from \"react\";\nimport { FormControl, MenuItem, Select } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport { sortData, editValue } from \"./utils\";\nimport LineGraph from \"./LineGraph\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [mapcountries, setMapcountries] = useState([]);\n  const [allCountry, setAllCountry] = useState({});\n  const [listCountry, setListCountry] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapcenter, setMapcenter] = useState({ lat: 34.8, lng: -40.5 });\n  const [mapzoom, setMapzoom] = useState(3);\n\n  useEffect(() => {\n    const url = \"https://disease.sh/v3/covid-19/all\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setAllCountry(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((res) => res.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n            cases: country.cases,\n          }));\n\n          const sortedData = sortData(data);\n\n          setMapcountries(data);\n          setCountries(countries);\n          setListCountry(sortedData);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    setCountry(e.target.value);\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setAllCountry(data);\n        countryCode === \"worldwide\"\n          ? setMapcenter([34.8, -40.5])\n          : setMapcenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapzoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app_dropDown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfoBox\n            click={(e) => setCasesType(\"cases\")}\n            active={casesType === \"cases\"}\n            isRed\n            title=\"Covid Cases\"\n            cases={editValue(allCountry.todayCases)}\n            total={editValue(allCountry.cases)}\n          />\n          <InfoBox\n            click={(e) => setCasesType(\"recovered\")}\n            active={casesType === \"recovered\"}\n            title=\"Recovered\"\n            cases={editValue(allCountry.todayRecovered)}\n            total={editValue(allCountry.recovered)}\n          />\n          <InfoBox\n            click={(e) => setCasesType(\"deaths\")}\n            active={casesType === \"deaths\"}\n            isRed\n            title=\"Deaths\"\n            cases={editValue(allCountry.todayDeaths)}\n            total={editValue(allCountry.deaths)}\n          />\n        </div>\n        <Map\n          center={mapcenter}\n          zoom={mapzoom}\n          casesType={casesType}\n          mapcountries={mapcountries}\n        />\n      </div>\n      <div className=\"app_right\">\n        <Table listCountry={listCountry} />\n        <LineGraph casesType={casesType} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}